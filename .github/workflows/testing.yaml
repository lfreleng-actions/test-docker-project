---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# Docker build workflow
name: 'Build & Test Docker Image 🐳'

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

permissions: {}

jobs:
  ### Build and test Docker image ###
  build:
    name: 'Build Docker Image'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: read
    timeout-minutes: 10
    steps:
      - name: 'Checkout repository'
        # yamllint disable-line rule:line-length
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2

      # Set up QEMU for multi-platform builds
      - name: 'Set up QEMU'
        # yamllint disable-line rule:line-length
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392  # v3.6.0

      # Set up Docker Buildx
      - name: 'Set up Docker Buildx'
        # yamllint disable-line rule:line-length
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435  # v3.11.1
        with:
          install: true

      # Cache Docker layers
      - name: 'Cache Docker layers'
        # yamllint disable-line rule:line-length
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809  # v4.2.4
        with:
          path: /tmp/.buildx-cache
          key: "${{ runner.os }}-buildx-${{ github.sha }}"
          restore-keys: |
            "${{ runner.os }}-buildx-"

      # Build and export Docker image
      - name: 'Build Docker image'
        # yamllint disable-line rule:line-length
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83  # v6.18.0
        with:
          context: './docker'
          push: false
          load: true
          tags: 'lf-hello-nginx:test'
          cache-from: 'type=local,src=/tmp/.buildx-cache'
          cache-to: 'type=local,dest=/tmp/.buildx-cache-new,mode=max'

      # Start the container
      - name: 'Start Docker container'
        run: |
          docker run -d --name test-container -p 8080:8080 lf-hello-nginx:test
          sleep 2

      # Test the image using http-api-tool-docker
      - name: 'Test Docker image content'
        id: content_test
        # yamllint disable rule:line-length
        uses: lfreleng-actions/http-api-tool-docker@1008eb6d9e353f0a8b03ef6a8202c281902ad49a  # v0.1.0
        with:
          url: 'http://localhost:8080'
          http_method: 'GET'
          expected_http_code: '200'
          regex: 'Hello Linux Foundation'
          retries: '3'
          initial_sleep_time: '2'
          curl_timeout: '10'
          service_name: 'Docker NGINX Test'
          debug: 'false'
          show_header_json: 'false'

      # Test health endpoint
      - name: 'Test Docker image health endpoint'
        id: health_test
        # yamllint disable rule:line-length
        uses: lfreleng-actions/http-api-tool-docker@1008eb6d9e353f0a8b03ef6a8202c281902ad49a  # v0.1.0
        with:
          url: 'http://localhost:8080/health'
          http_method: 'GET'
          expected_http_code: '200'
          regex: 'healthy'
          retries: '3'
          initial_sleep_time: '2'
          service_name: 'Docker NGINX Health Check'
          max_response_time: '1'
          debug: 'false'
          show_header_json: 'false'

      # Log brief test results
      - name: 'Test results summary'
        if: always()
        run: |
          echo "Content Test: ${{ steps.content_test.outcome }}"
          echo "Health Test: ${{ steps.health_test.outcome }}"

      # Stop container
      - name: 'Stop and remove container'
        if: always()
        run: |
          docker stop test-container
          docker rm test-container

      # Create job summary
      - name: 'Job summary'
        if: always()
        run: |
          {
            echo "# 🐳 Docker Image Test Results"
            echo ""
            echo "| Test | Status |"
            echo "| ---- | ------ |"
            echo "| Content | ${{ steps.content_test.outcome == 'success' &&
              '✅ Pass' || '❌ Fail' }} |"
            echo "| Health | ${{ steps.health_test.outcome == 'success' &&
              '✅ Pass' || '❌ Fail' }} |"
            if [[ "${{ steps.content_test.outcome }}" == "success" && \
                  "${{ steps.health_test.outcome }}" == "success" ]]; then
              echo "## ✅ All tests passed"
            else
              echo "## ❌ Some tests failed"
            fi
          } >> "$GITHUB_STEP_SUMMARY"

      # Move cache to avoid growing indefinitely
      - name: 'Move cache'
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
